// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v5.27.0
// source: team.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "team";

export interface FindAllRequest {
}

export interface FindOneRequest {
  id: number;
}

export interface FindByUserNameRequest {
  userName: string;
}

export interface CreateRequest {
  payload: UserPayload | undefined;
}

export interface UpdateRequest {
  userName: string;
  payload: UserPayload | undefined;
}

export interface DeleteRequest {
  userName: string;
}

export interface UserPayload {
  userName: string;
}

export interface User {
  id: number;
  userName: string;
  createAt: number;
  updateAt: number;
  teamIds: number[];
  taskIds: number[];
  commentIds: number[];
}

export interface Users {
  users: User[];
}

export const TEAM_PACKAGE_NAME = "team";

export interface UserServiceClient {
  findAll(request: FindAllRequest): Observable<Users>;

  findOne(request: FindOneRequest): Observable<User>;

  findByUserName(request: FindByUserNameRequest): Observable<User>;

  create(request: CreateRequest): Observable<User>;

  update(request: UpdateRequest): Observable<User>;

  delete(request: DeleteRequest): Observable<User>;
}

export interface UserServiceController {
  findAll(request: FindAllRequest): Promise<Users> | Observable<Users> | Users;

  findOne(request: FindOneRequest): Promise<User> | Observable<User> | User;

  findByUserName(request: FindByUserNameRequest): Promise<User> | Observable<User> | User;

  create(request: CreateRequest): Promise<User> | Observable<User> | User;

  update(request: UpdateRequest): Promise<User> | Observable<User> | User;

  delete(request: DeleteRequest): Promise<User> | Observable<User> | User;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["findAll", "findOne", "findByUserName", "create", "update", "delete"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
