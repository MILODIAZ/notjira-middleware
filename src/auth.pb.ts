// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v5.27.0
// source: auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "auth";

export interface CreateUserRequest {
  name: string;
  lastName: string;
  userName: string;
  email: string;
  password: string;
}

export interface UserRequest {
  id: string;
}

export interface UpdateUserRequest {
  id: string;
  name: string;
  lastName: string;
  userName: string;
  email: string;
  role: string;
}

export interface JWTRequest {
  jwt: string;
}

export interface UserResponse {
  id: string;
  email: string;
  message: string;
}

export interface UsersResponse {
  users: UserResponse[];
}

export interface EmptyRequest {
}

export interface LoginRequest {
  userName: string;
  password: string;
}

export interface LoginResponse {
  success: boolean;
  message: string;
  error: string;
}

export interface RecoverPasswordRequest {
  email: string;
}

export interface RecoverPasswordResponse {
  success: boolean;
  message: string;
  error: string;
}

export const AUTH_PACKAGE_NAME = "auth";

export interface AuthServiceClient {
  createUser(request: CreateUserRequest): Observable<UserResponse>;

  findUsers(request: EmptyRequest): Observable<UsersResponse>;

  findUser(request: UserRequest): Observable<UserResponse>;

  updateUser(request: UpdateUserRequest): Observable<UserResponse>;

  deleteUser(request: UserRequest): Observable<UserResponse>;

  updateJwt(request: JWTRequest): Observable<UserResponse>;

  login(request: LoginRequest): Observable<LoginResponse>;

  recoverPassword(request: RecoverPasswordRequest): Observable<RecoverPasswordResponse>;
}

export interface AuthServiceController {
  createUser(request: CreateUserRequest): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  findUsers(request: EmptyRequest): Promise<UsersResponse> | Observable<UsersResponse> | UsersResponse;

  findUser(request: UserRequest): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  updateUser(request: UpdateUserRequest): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  deleteUser(request: UserRequest): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  updateJwt(request: JWTRequest): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  login(request: LoginRequest): Promise<LoginResponse> | Observable<LoginResponse> | LoginResponse;

  recoverPassword(
    request: RecoverPasswordRequest,
  ): Promise<RecoverPasswordResponse> | Observable<RecoverPasswordResponse> | RecoverPasswordResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createUser",
      "findUsers",
      "findUser",
      "updateUser",
      "deleteUser",
      "updateJwt",
      "login",
      "recoverPassword",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
